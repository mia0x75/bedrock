// Package main code generated by 'freedom new-project base'
package main

import (
	"time"

	"github.com/8treenet/freedom/example/base/config"

	"github.com/8treenet/freedom"
	_ "github.com/8treenet/freedom/example/base/adapter/controller"
	_ "github.com/8treenet/freedom/example/base/adapter/repository"
	"github.com/8treenet/freedom/infra/requests"
	"github.com/8treenet/freedom/middleware"
	"github.com/go-redis/redis"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

func main() {
	app := freedom.NewApplication()
	/*
		installDatabase(app)
		installRedis(app)

		HTTP/2 h2c Runner
		runner := app.NewH2CRunner(config.Get().App.Other["listen_addr"].(string))
		HTTP/2 AutoTLS Runner
		runner := app.NewAutoTLSRunner(":443", "freedom.com www.freedom.com", "freedom@163.com")))
		HTTP/2 TLS Runner
		runner := app.NewTLSRunner(":443", "certFile", "keyFile")))
	*/

	installMiddleware(app)
	addrRunner := app.NewRunner(config.Get().App.Other["listen_addr"].(string))
	//app.InstallParty("/base")
	liveness(app)
	app.Run(addrRunner, config.Get().App)
}

func installMiddleware(app freedom.Application) {
	//Recover中间件
	app.InstallMiddleware(middleware.NewRecover())
	//Trace链路中间件
	app.InstallMiddleware(middleware.NewTrace("x-request-id"))

	//自定义请求日志配置文件
	//1.打印UA
	//2.修改请求日志前缀
	loggerconfigig := middleware.DefaultLoggerConfig()
	loggerconfigig.MessageHeaderKeys = append(loggerconfigig.MessageHeaderKeys, "User-Agent")
	loggerconfigig.Title = "[BASE-ACCESS]"
	//日志中间件，每个请求一个logger
	app.InstallMiddleware(middleware.NewRequestLogger("x-request-id", loggerconfigig))
	//logRow中间件，每一行日志都会触发回调。如果返回true，将停止中间件遍历回调。
	app.Logger().Handle(middleware.DefaultLogRowHandle)

	//HttpClient 普罗米修斯中间件，监控ClientAPI的请求。
	middle := middleware.NewClientPrometheus(config.Get().App.Other["service_name"].(string), freedom.Prometheus())
	requests.InstallMiddleware(middle)

	//总线中间件，处理上下游透传的Header
	app.InstallBusMiddleware(middleware.NewBusFilter())
}

func installDatabase(app freedom.Application) {
	app.InstallDB(func() interface{} {
		config := config.Get().DB
		db, err := gorm.Open(mysql.Open(config.Addr), &gorm.Config{})
		if err != nil {
			freedom.Logger().Fatal(err.Error())
		}

		sqlDB, err := db.DB()
		if err != nil {
			freedom.Logger().Fatal(err)
		}
		if err = sqlDB.Ping(); err != nil {
			freedom.Logger().Fatal(err)
		}

		sqlDB.SetMaxIdleConns(config.MaxIdleConns)
		sqlDB.SetMaxOpenConns(config.MaxOpenConns)
		sqlDB.SetConnMaxLifetime(time.Duration(config.ConnMaxLifeTime) * time.Second)
		return db
	})
}

func installRedis(app freedom.Application) {
	app.InstallRedis(func() (client redis.Cmdable) {
		cfg := config.Get().Redis
		opt := &redis.Options{
			Addr:               cfg.Addr,
			Password:           cfg.Password,
			DB:                 cfg.DB,
			MaxRetries:         cfg.MaxRetries,
			PoolSize:           cfg.PoolSize,
			ReadTimeout:        time.Duration(cfg.ReadTimeout) * time.Second,
			WriteTimeout:       time.Duration(cfg.WriteTimeout) * time.Second,
			IdleTimeout:        time.Duration(cfg.IdleTimeout) * time.Second,
			IdleCheckFrequency: time.Duration(cfg.IdleCheckFrequency) * time.Second,
			MaxConnAge:         time.Duration(cfg.MaxConnAge) * time.Second,
			PoolTimeout:        time.Duration(cfg.PoolTimeout) * time.Second,
		}
		redisClient := redis.NewClient(opt)
		if e := redisClient.Ping().Err(); e != nil {
			freedom.Logger().Fatal(e.Error())
		}
		client = redisClient
		return
	})
}

func liveness(app freedom.Application) {
	app.Iris().Get("/ping", func(ctx freedom.Context) {
		ctx.WriteString("pong")
	})
}
